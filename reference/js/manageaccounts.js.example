Connectors = function () {
	var handleReplacement = function (formId, url, data) {
		jQuery.ajax({
			type:    'POST',
			url:     url,
			data:    data,
			success: function (html) { jQuery(formId).html(html); }
		});
	};
	
	return {
		handleReplacement: handleReplacement,
		submitMyFitnessPalCredentials: function () {
			handleReplacement('#auth-myfitnesspal', '/api/xtream/myfitnesspal/submitCredentials', { username: jQuery('#myfitnesspal-username').val(), password: jQuery('#myfitnesspal-password').val() });
		},
		submitMoodscopeCredentials: function () {
			handleReplacement('#auth-moodscope', '/api/xtream/moodscope/submitCredentials', { username: jQuery('#moodscope-username').val(), password: jQuery('#moodscope-password').val() });
		},
		chooseWithingsUser: function () {
			handleReplacement('#auth-withings', '/api/xtream/withings/chooseWithingsUser', { chosenUser: jQuery('#withings-chosenUser:checked').val() });
		},
		submitWithingsUsernameAndPassword: function () {
			handleReplacement('#auth-withings', '/api/xtream/withings/setupWithings', { username: jQuery('#withings-username').val(), password: jQuery('#withings-password').val() });
		}
	};
}();

function openDialog(connectorName,urlName) {
	var el = jQuery("#test");
	switch (connectorName) {
	case 'quantifiedmind':
		el.html('<form name="' + connectorName + '-auth-form" action="/api/xtream/' + urlName + '/setToken" method="post">' +
			'<label for="' + connectorName + '-username"><a href="http://quantified-mind.com/authenticate/get_token" target="_blank">Username</a>: <input type="text" name="username" value="" size="15"></label>' +
			'<label for="' + connectorName + '-token"><a href="http://quantified-mind.com/authenticate/get_token" target="_blank">Token</a>: <input type="text" name="token" value="" size="15"></label>' +
			'<input type="submit" value="Connect">' +
			'</form>'
		);
		break;
	case 'mymee':
		el.html('<form name="' + connectorName + '-auth-form" action="/api/xtream/' + urlName + '/setAuthInfo" method="post">' +
				'<label for="' + connectorName + '-username">Username: <input type="text" name="username" value="" size="15"></label>' +
				'<label for="' + connectorName + '-password">Password: <input type="password" name="password" value="" size="15"></label>' +
				'<label for="' + connectorName + '-activation-code">Activation code: <input type="text" name="activationCode" value="" size="15"></label>' +
				'<input type="submit" value="Connect">' +
				'</form>'
			);
		break;
	default:
		console.log('Connector ' + connectorName + ' isn\'t handled by the authentication form creator.');
	}
	
	jQuery("#test").dialog("open");
}


ManageAccountsPage = function () {
	// If renderConnectorsTemplate is called early, wait for half a second and check if it's been replaced with its final version
	var renderConnectorsTemplate = function() { setTimeout(renderConnectorsTemplate, 500); }; 
	
	var reloadConnectorData = function () {
		var cleanArray = function (array) {
			var newArray = [];
			for (var i = 0; i < array.length; i++) {
				var el = array[i];
				switch (el.name) {
					// Connectors to be hidden
					case 'api/xtream Capture':
					case 'Google Latitude':
					case 'Zeo':
						break;
					default:
						newArray.push(el);
				}
			}
			newArray.sort(function(a, b) { return (a.name < b.name) ? -1 : (a.name == b.name) ? 0 : 1; });
			return newArray;
		};
		
		var handleFinish = function(installedConnectors, uninstalledConnectors) {
			jQuery('#connectorInfoTable').html(Mustache.render(jQuery("#connectorsTemplate").html(), { "connectors": installedConnectors.concat(uninstalledConnectors) }));
			
			// Handle clicking delete
			jQuery('.remove-button').bind('click', function () {
				var el = jQuery(this);
				var id = el.attr('id');
				var connectorName = id.replace(/^remove-/, '');
				el.html('Deleting...');
				jQuery.ajax({
					type:    'DELETE',
					url:     '/api/xtream/api/connectors/' + connectorName,
					success: reloadConnectorData
				});
			});
			
			var setupFormReplacement = function (el, connectorName, formId, submitUrl) {
				el.html('<form name="' + connectorName + '-auth-form">' +
					'<label for="' + connectorName + '-username">Username: <input type="text" id="' + connectorName + '-username" name="username" value="" size="15"></label>' +
					'<label for="' + connectorName + '-password">Password: <input type="password" id="' + connectorName + '-password" name="password" value="" size="15"></label>' +
					'<input type="submit" value="Connect">' +
					'</form>'
				);
				// Precompute the strings so that urlName and connectorName and so on can be garbage collected now and things are more efficient later
				var usernameSelector = '#' + connectorName + '-username';
				var passwordSelector = '#' + connectorName + '-password';
				jQuery('form[name="' + connectorName + '-auth-form"]').submit(function (event) {
					Connectors.handleReplacement(formId, submitUrl, { username: jQuery(usernameSelector).val(), password: jQuery(passwordSelector).val() });
					event.preventDefault();
				});
			};
			

			// Create authentication forms
			jQuery('.auth').each(function() {
				var el = jQuery(this);
				var id = el.attr('id');
				var connectorName = id.replace(/^auth-/, '');
				var urlName = connectorName;
				switch (urlName) {
					case 'google_calendar': urlName = 'calendar'; break;
				}
				
				switch (connectorName) {
					case 'bodymedia':
					case 'flickr':
					case 'fitbit':
					case 'google_calendar':
					case 'lastfm':
					case 'runkeeper':
					case 'twitter':
						el.html('<form name="' + connectorName + '-auth-form" action="/api/xtream/' + urlName + '/token" method="get">' +
							'<input type="submit" value="Connect">' +
							'</form>');
						break;
					
					case 'moodscope':
						setupFormReplacement(el, connectorName, '#' + id, '/api/xtream/' + urlName + '/submitCredentials');
						break;
					case 'myfitnesspal':
						setupFormReplacement(el, connectorName, '#' + id, '/api/xtream/' + urlName + '/submitCredentials');
						break;
					case 'withings':
						setupFormReplacement(el, connectorName, '#' + id, '/api/xtream/' + urlName + '/setup' + urlName.charAt(0).toUpperCase() + urlName.slice(1));
						break;
					case 'quantifiedmind':
					case 'mymee':
						el.html('<input type="button" value="Connect" onClick="javascript:openDialog(\''+connectorName+'\',\''+urlName+'\')">');
						break;
					case 'github':
						el.html('<form name="' + connectorName + '-auth-form" action="https://api.singly.com/authorize" method="GET">' +
							'<input type="hidden" name="client_id" value="4537f968e8d5298aba2c4fc3bfde2cf5">' +
							'<input type="hidden" name="redirect_uri" value="' + window.location.origin + '/api/xtream/singly/github/callback">' +
							'<input type="hidden" name="service" value="github">' +
							'<input type="submit" value="Connect">' +
							'</form>');
						break;
						
					default:
						console.log('Connector ' + connectorName + ' isn\'t handled by the authentication form creator.');
				}
			});
		};
		
		
	jQuery("#test").dialog({                   
		        'dialogClass'   : 'wp-dialog',           
		        'modal'         : true,
		        'autoOpen'      : false, 
		        'closeOnEscape' : true
		    });
	
		var installedConnectors = null;
		var uninstalledConnectors = null;
		// Start both AJAX requests at the same time for speed. Whichever gets data back last handles it properly.
		jQuery.ajax("/api/xtream/api/connectors/installed").done(function (connectors) {
			installedConnectors = cleanArray(connectors);
			if (uninstalledConnectors !== null) { handleFinish(installedConnectors, uninstalledConnectors); }
		});
		jQuery.ajax("/api/xtream/api/connectors/uninstalled").done(function (connectors) {
			uninstalledConnectors = cleanArray(connectors);
			if (installedConnectors !== null) { handleFinish(installedConnectors, uninstalledConnectors); }
		});
	};
	
	var initLoginDialog = function () {
		if (!isLoggedIn) {
			jQuery(document).on('lwa_login', function (event, data, form) {
				if (data.result === true) {
					Quantimodo.getMeasurementsRange([], function (range) {
						dateRangeStart = new Date(0);
						dateRangeStart.setUTCSeconds(range[0]);
						jQuery('#datepicker-start').datepicker('setDate', dateRangeStart);
						dateRangeEnd = new Date(0);
						dateRangeEnd.setUTCSeconds(range[1]);
						jQuery('#datepicker-end').datepicker('setDate', dateRangeEnd);
				
						refreshVariables();
					});
					refreshUnits();
					
					jQuery("#login-dialog-background").addClass('transitions').css({ 'opacity': 0 });
					jQuery("#login-dialog").addClass('transitions').css({ 'opacity': 0 });
					
					setTimeout(function () {
						jQuery("#login-dialog-background").css({ 'display': 'none' });
						jQuery("#login-dialog").css({ 'display': 'none' });
					}, 500);
				}
			});
		}
	};
	
	// Requires div with .loading-overlay in element
	var showLoadingOverlay = function (element) {
		jQuery(element + " .loading-overlay").css('display', 'table-cell');  
		jQuery(element + " .loading-overlay").css('opacity', 0.5); 
	};
	
	var hideLoadingOverlay = function (element) {
		jQuery(element + " .loading-overlay").css('opacity', 0); 
		setTimeout(function () {
			jQuery(element + " .loading-overlay").css('display', 'none');  
		}, 500);
	};
	
	var retrieveSettings = function () {	
		if (typeof Storage !== "undefined") {
			//dateSelectorVisible = (localStorage["dateSelectorVisible"] || "true") == "true";
		}
	};
	
	var saveSetting = function (setting, value) {
		if (typeof Storage !== "undefined") {
			localStorage[setting] = value;
		}
	};
	
	var toggleElement = function (element) {
		var content = jQuery(element);
		content.inner = jQuery(element + ' .inner');
		
		content.on('transitionEnd webkitTransitionEnd transitionend oTransitionEnd msTransitionEnd', function (e) {
			if (content.hasClass('open')) {
				content.css('max-height', 9999);
			}
		});
		
		content.toggleClass('open closed');
		content.contentHeight = content.outerHeight();
		
		if (content.hasClass('closed')) {
			content.removeClass('transitions').css('max-height', content.contentHeight);
			setTimeout(function () { content.addClass('transitions').css({ 'max-height': 0 }); }, 10);
		}
		else if (content.hasClass('open')) {
			content.contentHeight += content.inner.outerHeight();
			content.addClass('transitions').css({ 'max-height': content.contentHeight });
		}
	};
	
	return {
		init: function () {
			retrieveSettings();
			reloadConnectorData();
			initLoginDialog();
		},
	};
}();
jQuery(ManageAccountsPage.init);

